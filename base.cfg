[buildout]
allow-picked-versions = false

parts =
    omelette
    instance
    zopepy
    repozo
    upgrade

# If you want to get the last versions of eggs, you have to comment the line "versions-prod.cfg"
extends =
    http://dist.plone.org/release/4.3.6/versions.cfg
    versions-base.cfg

index = http://devpi.imio.be/root/imio/+simple/
# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.3.6
    http://dist.plone.org/thirdparty
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads

allow-hosts +=
    devpi.imio.be
    *.plone.org
    *.zope.org
    effbot.org
    *.python.org
    github.com
    code.google.com


# Add additional eggs here
# elementtree is required by Plone
eggs =
    Plone
    Pillow


# Only take stable eggs
#prefer-final = true

# Always unzip eggs
unzip = true

relative-paths = true

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

[instance]
recipe = plone.recipe.zope2instance
#effective-user = zope
user = admin:admin
http-address = 8081
zserver-threads = 4
debug-mode = off
verbose-security = off
zope-conf-additional =
  %define FILESTORAGE ${buildout:directory}/var/filestorage
  %define BLOBSTORAGE ${buildout:directory}/var/blobstorage
environment-vars =
  PYTHON_EGG_CACHE ${buildout:directory}/python-eggs
  zope_i18n_compile_mo_files true

# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}
    cpskin.policy
    Products.CPUtils
    Products.csvreplicata
    communesplone.layout
    plone.app.multilingual
    archetypes.multilingual
    sc.social.bookmarks
    collective.cookiecuttr
    collective.js.fancybox
    collective.messagesviewlet
    collective.ptg.fancybox
    collective.ptg.highslide
    collective.portlet.content
    collective.upgrade
    cpskin.cirkwi
    cpskin.diazotheme.trendy
    cpskin.diazotheme.trendybasic
    cpskin.diazotheme.modern
    cpskin.diazotheme.retro
    collective.contact.core
    collective.contact.facetednav
    collective.contact.duplicated
    collective.contact.membrane
    collective.taxonomy
    Products.PloneHotfix20160419

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =
    cpskin.policy
    collective.js.fancybox
    collective.messagesviewlet
    collective.ptg.fancybox
    cpskin.diazotheme.trendy
    cpskin.diazotheme.trendybasic
    cpskin.diazotheme.modern
    cpskin.diazotheme.retro


[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy


[ipzope]
recipe = zc.recipe.egg
eggs = ipython ${instance:eggs}
initialization =
    import sys, os
    os.environ["INSTANCE_HOME"] = "${instance:location}"
    sys.argv[1:1] = "--profile zope2".split()
scripts = ipython=ipzope

[repozo]
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo

[standard]
recipe = collective.recipe.plonesite
site-id = standard
instance = instance
default-language = fr
profiles-initial = cpskin.policy:default
site-replace = false
post-extras = standard-config.py

[debug-products]
eggs =
    Products.Clouseau
    Products.DocFinderTab
    Products.PrintingMailHost
    ipdb
    iw.debug

zcml =
    iw.debug

[upgrade]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
scripts = upgrade-portals
arguments = args=[
    '--zope-conf', '${instance:location}/etc/zope.conf',
    '--log-file', '${buildout:directory}/var/log/upgrade.log']
